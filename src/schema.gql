type Stock {
    _id: ID
    quantity: Int!
    price: String!
    item: Item!
}

type Item {
    _id: ID
    upc: String!
    title: String!
}

type User {
    _id: ID
    username: String!
    password: String!
    email: String!
    locations: [Location!]!
}

type Location {
    _id: ID
    title: String!
    salesTax: Int
    users: [User!]!
    inventory: [Stock!]!
}

input LocationInput {
    title: String!
}

input ItemInput {
    upc: String!
    title: String!
}

type ProductInformation {
    titleSuggestions: [String!]
    brandSuggestions: [String!]
    suggestedPrice: Float!
}

type Authentication {
    userId: ID!
    token: String!
    tokenExpiration: String!
}

input UserInput {
    username: String!
    email: String!
    password: String!
}

input LoginInput {
    email: String!
    password: String!
}

input StockInput {
    locationId: String!
    upc: String!
}

type RootQuery {
    user: User!
    login(loginInput: LoginInput!) : Authentication!
    getProductInformation(upc: String!) : ProductInformation!
}

type RootMutation {
    createUser(userInput: UserInput!) : User!
    createLocation(locationInput: LocationInput!) : Location!
    createItem(itemInput: ItemInput!) : Item!
    createStock(stockInput: StockInput!): Stock!
}

schema {
    query: RootQuery
    mutation: RootMutation
}